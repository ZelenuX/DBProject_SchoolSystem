package ru.school.database.ui.utils;

import com.vaadin.flow.component.HasValue;
import com.vaadin.flow.component.HasValueAndElement;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.grid.Grid;
import com.vaadin.flow.component.icon.VaadinIcon;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.component.timepicker.TimePicker;
import com.vaadin.flow.data.selection.SingleSelect;
import org.vaadin.crudui.crud.CrudOperation;
import org.vaadin.crudui.crud.impl.GridCrud;
import org.vaadin.crudui.layout.impl.HorizontalSplitCrudLayout;
import ru.school.database.backend.controllers.RepositoryService;
import ru.school.database.backend.controllers.TimetableService;
import ru.school.database.backend.filteringUtils.ObjectProvider;
import ru.school.database.ui.filterComponents.Filter;
import ru.school.database.ui.filterComponents.IntFilter;
import ru.school.database.ui.filterComponents.LongFilter;
import ru.school.database.ui.filterComponents.StringFilter;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CRUDFormBuilder{
    public static <Entity, ID> GridCrud<Entity> build(RepositoryService<Entity, ID> repositoryController){
        GridCrud<Entity> crud = new GridCrud<>(repositoryController.getEntityClass());
        List<RepositoryService.Column> cols = repositoryController.getCols();
        List<String> colNames = new ArrayList<>();
        List<String> manuallyEnteredColNames = new ArrayList<>();
        List<String> readOnlyCols = new ArrayList<>();
        cols.forEach(column -> {
            colNames.add(column.getName());
            if (!column.isAutoGenerated()){
                manuallyEnteredColNames.add(column.getName());
            }
            if (column.isFinal()){
                readOnlyCols.add(column.getName());
            }
        });
        String[] manuallyEnteredColNamesArray = manuallyEnteredColNames.toArray(new String[0]);
        crud.getGrid().setColumns(colNames.toArray(new String[0]));
        crud.getCrudFormFactory().setVisibleProperties(CrudOperation.ADD, manuallyEnteredColNamesArray);
        crud.getCrudFormFactory().setVisibleProperties(CrudOperation.UPDATE, manuallyEnteredColNamesArray);
        crud.getCrudFormFactory().setVisibleProperties(CrudOperation.DELETE, manuallyEnteredColNamesArray);
        crud.getCrudFormFactory().setDisabledProperties(CrudOperation.UPDATE, readOnlyCols.toArray(new String[]{}));
        cols.forEach(column -> {
            if (column.isCombobox()){
                crud.getCrudFormFactory().setFieldProvider(column.getName(),
                        repositoryController.getFieldProvider(column.getName()));
            }
            if (column.isTime()){
                crud.getCrudFormFactory().setFieldType(column.getName(), TimePicker.class);
            }
        });
        crud.setFindAllOperation(repositoryController::findAll);
        crud.setAddOperation(repositoryController::add);
        crud.setDeleteOperation(repositoryController::delete);
        crud.setUpdateOperation(repositoryController::update);
        crud.getCrudFormFactory().setUseBeanValidation(true);
        return crud;
    }
    public static <Entity, ID> GridCrud<Entity> buildHorizontal(RepositoryService<Entity, ID> repositoryController){
        GridCrud<Entity> crud = new GridCrud<>(repositoryController.getEntityClass(), new HorizontalSplitCrudLayout());
        List<RepositoryService.Column> cols = repositoryController.getCols();
        List<String> colNames = new ArrayList<>();
        List<String> manuallyEnteredColNames = new ArrayList<>();
        List<String> readOnlyCols = new ArrayList<>();
        cols.forEach(column -> {
            colNames.add(column.getName());
            if (!column.isAutoGenerated()){
                manuallyEnteredColNames.add(column.getName());
            }
            if (column.isFinal()){
                readOnlyCols.add(column.getName());
            }
        });
        String[] manuallyEnteredColNamesArray = manuallyEnteredColNames.toArray(new String[0]);
        crud.getGrid().setColumns(colNames.toArray(new String[0]));
        crud.getCrudFormFactory().setVisibleProperties(CrudOperation.ADD, manuallyEnteredColNamesArray);
        crud.getCrudFormFactory().setVisibleProperties(CrudOperation.UPDATE, manuallyEnteredColNamesArray);
        crud.getCrudFormFactory().setVisibleProperties(CrudOperation.DELETE, manuallyEnteredColNamesArray);
        crud.getCrudFormFactory().setDisabledProperties(CrudOperation.UPDATE, readOnlyCols.toArray(new String[]{}));
        cols.forEach(column -> {
            if (column.isCombobox()){
                crud.getCrudFormFactory().setFieldProvider(column.getName(),
                        repositoryController.getFieldProvider(column.getName()));
            }
            if (column.isTime()){
                crud.getCrudFormFactory().setFieldType(column.getName(), TimePicker.class);
            }
        });
        crud.setFindAllOperation(repositoryController::findAll);
        crud.setAddOperation(repositoryController::add);
        crud.setDeleteOperation(repositoryController::delete);
        crud.setUpdateOperation(repositoryController::update);
        crud.getCrudFormFactory().setUseBeanValidation(true);
        return crud;
    }
    public static <Entity, ID> MyGridCrud<Entity> buildIdeal(RepositoryService<Entity, ID> repositoryController){
        MyGridCrud<Entity> crud = new MyGridCrud<>(repositoryController.getEntityClass(), new HorizontalSplitCrudLayout());
        List<RepositoryService.Column> cols = repositoryController.getCols();
        List<String> colNames = new ArrayList<>();
        List<String> manuallyEnteredColNames = new ArrayList<>();
        List<String> readOnlyCols = new ArrayList<>();
        cols.forEach(column -> {
            colNames.add(column.getName());
            if (!column.isAutoGenerated()){
                manuallyEnteredColNames.add(column.getName());
            }
            if (column.isFinal()){
                readOnlyCols.add(column.getName());
            }
        });
        String[] manuallyEnteredColNamesArray = manuallyEnteredColNames.toArray(new String[0]);
        crud.getGrid().setColumns(colNames.toArray(new String[0]));
        crud.getCrudFormFactory().setVisibleProperties(CrudOperation.ADD, manuallyEnteredColNamesArray);
        crud.getCrudFormFactory().setVisibleProperties(CrudOperation.UPDATE, manuallyEnteredColNamesArray);
        crud.getCrudFormFactory().setVisibleProperties(CrudOperation.DELETE, manuallyEnteredColNamesArray);
        crud.getCrudFormFactory().setDisabledProperties(CrudOperation.UPDATE, readOnlyCols.toArray(new String[]{}));
        cols.forEach(column -> {
            if (column.isCombobox()){
                crud.getCrudFormFactory().setFieldProvider(column.getName(),
                        repositoryController.getFieldProvider(column.getName()));
            }
            if (column.isTime()){
                crud.getCrudFormFactory().setFieldType(column.getName(), TimePicker.class);
            }
        });
        crud.setFindAllOperation(repositoryController::findAllFiltered);
        crud.setAddOperation(repositoryController::add);
        crud.setDeleteOperation(repositoryController::delete);
        crud.setUpdateOperation(repositoryController::update);
        crud.getCrudFormFactory().setUseBeanValidation(true);

        Map<String, ObjectProvider> filters = new HashMap<>();
        colNames.forEach(colName -> {
            String getMethodName = "get" + Character.toUpperCase(colName.charAt(0)) + colName.substring(1);
            try {
                Class colType = repositoryController.getEntityClass().getMethod(getMethodName).getReturnType();
                Filter newFilter = null;
                if (long.class.equals(colType) || Long.class.equals(colType)){
                    newFilter = new LongFilter(colName);
                }
                else if (String.class.equals(colType)){
                    newFilter = new StringFilter(colName);
                }
                else if (int.class.equals(colType) || Integer.class.equals(colType)){
                    newFilter = new IntFilter(colName);
                }
                if (newFilter != null){
                    filters.put(colName, newFilter);
                    crud.getCrudLayout().addFilterComponent(newFilter.getTextField());
                }
            } catch (NoSuchMethodException e) {
                throw new RuntimeException("No method \"" + getMethodName + "\" in entity class \""
                        + repositoryController.getEntityClass().getName() + "\"");
            }
        });
        repositoryController.buildSpecification(filters);

        return crud;
    }
}
