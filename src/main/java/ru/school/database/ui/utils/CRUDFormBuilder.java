package ru.school.database.ui.utils;

import org.apache.commons.lang3.ArrayUtils;
import org.springframework.data.jpa.repository.JpaRepository;
import org.vaadin.crudui.crud.CrudOperation;
import org.vaadin.crudui.crud.impl.GridCrud;
import ru.school.database.backend.controllers.RepositoryService;

import java.util.ArrayList;
import java.util.List;

public class CRUDFormBuilder{
    public static <Entity, ID> GridCrud<Entity> build(RepositoryService<Entity, ID> repositoryController){
        GridCrud<Entity> crud = new GridCrud<>(repositoryController.getEntityClass());
        List<RepositoryService.Column> cols = repositoryController.getCols();
        List<String> colNames = new ArrayList<>();
        List<String> manuallyEnteredColNames = new ArrayList<>();
        cols.forEach(column -> {
            colNames.add(column.getName());
            if (!column.isAutoGenerated()){
                manuallyEnteredColNames.add(column.getName());
            }
        });
        String[] manuallyEnteredColNamesArray = manuallyEnteredColNames.toArray(new String[0]);
        crud.getGrid().setColumns(colNames.toArray(new String[0]));
        crud.getCrudFormFactory().setVisibleProperties(CrudOperation.ADD, manuallyEnteredColNamesArray);
        crud.getCrudFormFactory().setVisibleProperties(CrudOperation.UPDATE, manuallyEnteredColNamesArray);
        crud.getCrudFormFactory().setVisibleProperties(CrudOperation.DELETE, manuallyEnteredColNamesArray);
        cols.forEach(column -> {
            if (column.isCombobox()){
                crud.getCrudFormFactory().setFieldProvider(column.getName(),
                        repositoryController.getFieldProvider(column.getName()));
            }
        });
        crud.setFindAllOperation(repositoryController::findAll);
        crud.setAddOperation(repositoryController::add);
        crud.setDeleteOperation(repositoryController::delete);
        crud.setUpdateOperation(repositoryController::update);
        crud.getCrudFormFactory().setUseBeanValidation(true);
        return crud;
    }
    public static <Entity, ID> GridCrud<Entity> build3(RepositoryService<Entity, ID> repository, String autoGeneratedIdColumn, String... otherCols){
        GridCrud<Entity> crud = new GridCrud<>(repository.getEntityClass());
        String[] colsWithId;
        if (autoGeneratedIdColumn != null){
            colsWithId = ArrayUtils.addAll(new String[]{autoGeneratedIdColumn}, otherCols);
        }
        else {
            colsWithId = otherCols;
        }
        crud.getGrid().setColumns(colsWithId);
        crud.getGrid().setColumnReorderingAllowed(true);
        crud.getCrudFormFactory().setVisibleProperties(CrudOperation.ADD, otherCols);
        crud.getCrudFormFactory().setVisibleProperties(CrudOperation.UPDATE, otherCols);
        crud.setFindAllOperation(repository::findAll);
        crud.setAddOperation(repository::add);
        crud.setDeleteOperation(repository::delete);
        crud.setUpdateOperation(repository::update);
        crud.getCrudFormFactory().setUseBeanValidation(true);
        return crud;
    }
    public static <Entity> CRUDForm<Entity> build2(Class<Entity> entityClass, JpaRepository repository, String autoGeneratedIdColumn, String... otherCols){
        return new CRUDForm<>(entityClass, repository, autoGeneratedIdColumn, otherCols);
    }
}
